Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression POINTER expression
Rule 2     expression -> expression PPOINTER expression
Rule 3     expression -> expression PARALLEL expression
Rule 4     expression -> descriptor POINTER expression
Rule 5     expression -> descriptor PPOINTER expression
Rule 6     expression -> term
Rule 7     term -> task
Rule 8     descriptor -> DESCRIPTOR
Rule 9     task -> TASKNAME
Rule 10    task -> task LPAREN expression SEPERATOR expression RPAREN

Terminals, with rules where they appear

COMMENT              : 
DESCRIPTOR           : 8
LPAREN               : 10
PARALLEL             : 3
POINTER              : 1 4
PPOINTER             : 2 5
RPAREN               : 10
SEPERATOR            : 10
TASKNAME             : 9
error                : 

Nonterminals, with rules where they appear

descriptor           : 4 5
expression           : 1 1 2 2 3 3 4 5 10 10 0
task                 : 7 10
term                 : 6

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    expression                     shift and go to state 1
    descriptor                     shift and go to state 2
    term                           shift and go to state 3
    task                           shift and go to state 5

state 1

    (0) S' -> expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         shift and go to state 7
    PPOINTER        shift and go to state 8
    PARALLEL        shift and go to state 9


state 2

    (4) expression -> descriptor . POINTER expression
    (5) expression -> descriptor . PPOINTER expression

    POINTER         shift and go to state 10
    PPOINTER        shift and go to state 11


state 3

    (6) expression -> term .

    POINTER         reduce using rule 6 (expression -> term .)
    PPOINTER        reduce using rule 6 (expression -> term .)
    PARALLEL        reduce using rule 6 (expression -> term .)
    $end            reduce using rule 6 (expression -> term .)
    SEPERATOR       reduce using rule 6 (expression -> term .)
    RPAREN          reduce using rule 6 (expression -> term .)


state 4

    (8) descriptor -> DESCRIPTOR .

    POINTER         reduce using rule 8 (descriptor -> DESCRIPTOR .)
    PPOINTER        reduce using rule 8 (descriptor -> DESCRIPTOR .)


state 5

    (7) term -> task .
    (10) task -> task . LPAREN expression SEPERATOR expression RPAREN

    POINTER         reduce using rule 7 (term -> task .)
    PPOINTER        reduce using rule 7 (term -> task .)
    PARALLEL        reduce using rule 7 (term -> task .)
    $end            reduce using rule 7 (term -> task .)
    SEPERATOR       reduce using rule 7 (term -> task .)
    RPAREN          reduce using rule 7 (term -> task .)
    LPAREN          shift and go to state 12


state 6

    (9) task -> TASKNAME .

    LPAREN          reduce using rule 9 (task -> TASKNAME .)
    POINTER         reduce using rule 9 (task -> TASKNAME .)
    PPOINTER        reduce using rule 9 (task -> TASKNAME .)
    PARALLEL        reduce using rule 9 (task -> TASKNAME .)
    $end            reduce using rule 9 (task -> TASKNAME .)
    SEPERATOR       reduce using rule 9 (task -> TASKNAME .)
    RPAREN          reduce using rule 9 (task -> TASKNAME .)


state 7

    (1) expression -> expression POINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    expression                     shift and go to state 13
    descriptor                     shift and go to state 2
    term                           shift and go to state 3
    task                           shift and go to state 5

state 8

    (2) expression -> expression PPOINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    expression                     shift and go to state 14
    descriptor                     shift and go to state 2
    term                           shift and go to state 3
    task                           shift and go to state 5

state 9

    (3) expression -> expression PARALLEL . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    expression                     shift and go to state 15
    descriptor                     shift and go to state 2
    term                           shift and go to state 3
    task                           shift and go to state 5

state 10

    (4) expression -> descriptor POINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    descriptor                     shift and go to state 2
    expression                     shift and go to state 16
    term                           shift and go to state 3
    task                           shift and go to state 5

state 11

    (5) expression -> descriptor PPOINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    descriptor                     shift and go to state 2
    expression                     shift and go to state 17
    term                           shift and go to state 3
    task                           shift and go to state 5

state 12

    (10) task -> task LPAREN . expression SEPERATOR expression RPAREN
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    task                           shift and go to state 5
    expression                     shift and go to state 18
    descriptor                     shift and go to state 2
    term                           shift and go to state 3

state 13

    (1) expression -> expression POINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 1 (expression -> expression POINTER expression .)
    PPOINTER        reduce using rule 1 (expression -> expression POINTER expression .)
    PARALLEL        reduce using rule 1 (expression -> expression POINTER expression .)
    $end            reduce using rule 1 (expression -> expression POINTER expression .)
    SEPERATOR       reduce using rule 1 (expression -> expression POINTER expression .)
    RPAREN          reduce using rule 1 (expression -> expression POINTER expression .)

  ! POINTER         [ shift and go to state 7 ]
  ! PPOINTER        [ shift and go to state 8 ]
  ! PARALLEL        [ shift and go to state 9 ]


state 14

    (2) expression -> expression PPOINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 2 (expression -> expression PPOINTER expression .)
    PPOINTER        reduce using rule 2 (expression -> expression PPOINTER expression .)
    PARALLEL        reduce using rule 2 (expression -> expression PPOINTER expression .)
    $end            reduce using rule 2 (expression -> expression PPOINTER expression .)
    SEPERATOR       reduce using rule 2 (expression -> expression PPOINTER expression .)
    RPAREN          reduce using rule 2 (expression -> expression PPOINTER expression .)

  ! POINTER         [ shift and go to state 7 ]
  ! PPOINTER        [ shift and go to state 8 ]
  ! PARALLEL        [ shift and go to state 9 ]


state 15

    (3) expression -> expression PARALLEL expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 3 (expression -> expression PARALLEL expression .)
    PPOINTER        reduce using rule 3 (expression -> expression PARALLEL expression .)
    PARALLEL        reduce using rule 3 (expression -> expression PARALLEL expression .)
    $end            reduce using rule 3 (expression -> expression PARALLEL expression .)
    SEPERATOR       reduce using rule 3 (expression -> expression PARALLEL expression .)
    RPAREN          reduce using rule 3 (expression -> expression PARALLEL expression .)

  ! POINTER         [ shift and go to state 7 ]
  ! PPOINTER        [ shift and go to state 8 ]
  ! PARALLEL        [ shift and go to state 9 ]


state 16

    (4) expression -> descriptor POINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 4 (expression -> descriptor POINTER expression .)
    PPOINTER        reduce using rule 4 (expression -> descriptor POINTER expression .)
    PARALLEL        reduce using rule 4 (expression -> descriptor POINTER expression .)
    $end            reduce using rule 4 (expression -> descriptor POINTER expression .)
    SEPERATOR       reduce using rule 4 (expression -> descriptor POINTER expression .)
    RPAREN          reduce using rule 4 (expression -> descriptor POINTER expression .)

  ! POINTER         [ shift and go to state 7 ]
  ! PPOINTER        [ shift and go to state 8 ]
  ! PARALLEL        [ shift and go to state 9 ]


state 17

    (5) expression -> descriptor PPOINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    PPOINTER        reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    PARALLEL        reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    $end            reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    SEPERATOR       reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    RPAREN          reduce using rule 5 (expression -> descriptor PPOINTER expression .)

  ! POINTER         [ shift and go to state 7 ]
  ! PPOINTER        [ shift and go to state 8 ]
  ! PARALLEL        [ shift and go to state 9 ]


state 18

    (10) task -> task LPAREN expression . SEPERATOR expression RPAREN
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    SEPERATOR       shift and go to state 19
    POINTER         shift and go to state 7
    PPOINTER        shift and go to state 8
    PARALLEL        shift and go to state 9


state 19

    (10) task -> task LPAREN expression SEPERATOR . expression RPAREN
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . term
    (8) descriptor -> . DESCRIPTOR
    (7) term -> . task
    (9) task -> . TASKNAME
    (10) task -> . task LPAREN expression SEPERATOR expression RPAREN

    DESCRIPTOR      shift and go to state 4
    TASKNAME        shift and go to state 6

    task                           shift and go to state 5
    expression                     shift and go to state 20
    descriptor                     shift and go to state 2
    term                           shift and go to state 3

state 20

    (10) task -> task LPAREN expression SEPERATOR expression . RPAREN
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    RPAREN          shift and go to state 21
    POINTER         shift and go to state 7
    PPOINTER        shift and go to state 8
    PARALLEL        shift and go to state 9


state 21

    (10) task -> task LPAREN expression SEPERATOR expression RPAREN .

    LPAREN          reduce using rule 10 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    POINTER         reduce using rule 10 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    PPOINTER        reduce using rule 10 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    PARALLEL        reduce using rule 10 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    $end            reduce using rule 10 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    SEPERATOR       reduce using rule 10 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    RPAREN          reduce using rule 10 (task -> task LPAREN expression SEPERATOR expression RPAREN .)

