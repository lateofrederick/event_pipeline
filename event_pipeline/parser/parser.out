Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DIRECTIVE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression POINTER expression
Rule 2     expression -> expression PPOINTER expression
Rule 3     expression -> expression PARALLEL expression
Rule 4     expression -> descriptor POINTER expression
Rule 5     expression -> descriptor PPOINTER expression
Rule 6     expression -> factor RETRY task
Rule 7     expression -> task RETRY factor
Rule 8     expression -> term
Rule 9     term -> task
Rule 10    descriptor -> NUMBER
Rule 11    factor -> NUMBER
Rule 12    task -> TASKNAME
Rule 13    task -> task LPAREN expression SEPERATOR expression RPAREN

Terminals, with rules where they appear

COMMENT              : 
DIRECTIVE            : 
LPAREN               : 13
NUMBER               : 10 11
PARALLEL             : 3
POINTER              : 1 4
PPOINTER             : 2 5
RETRY                : 6 7
RPAREN               : 13
SEPERATOR            : 13
TASKNAME             : 12
error                : 

Nonterminals, with rules where they appear

descriptor           : 4 5
expression           : 1 1 2 2 3 3 4 5 13 13 0
factor               : 6 7
task                 : 6 7 9 13
term                 : 8

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    expression                     shift and go to state 1
    descriptor                     shift and go to state 2
    factor                         shift and go to state 3
    task                           shift and go to state 4
    term                           shift and go to state 5

state 1

    (0) S' -> expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         shift and go to state 8
    PPOINTER        shift and go to state 9
    PARALLEL        shift and go to state 10


state 2

    (4) expression -> descriptor . POINTER expression
    (5) expression -> descriptor . PPOINTER expression

    POINTER         shift and go to state 11
    PPOINTER        shift and go to state 12


state 3

    (6) expression -> factor . RETRY task

    RETRY           shift and go to state 13


state 4

    (7) expression -> task . RETRY factor
    (13) task -> task . LPAREN expression SEPERATOR expression RPAREN
    (9) term -> task .

    RETRY           shift and go to state 14
    LPAREN          shift and go to state 15
    POINTER         reduce using rule 9 (term -> task .)
    PPOINTER        reduce using rule 9 (term -> task .)
    PARALLEL        reduce using rule 9 (term -> task .)
    $end            reduce using rule 9 (term -> task .)
    SEPERATOR       reduce using rule 9 (term -> task .)
    RPAREN          reduce using rule 9 (term -> task .)


state 5

    (8) expression -> term .

    POINTER         reduce using rule 8 (expression -> term .)
    PPOINTER        reduce using rule 8 (expression -> term .)
    PARALLEL        reduce using rule 8 (expression -> term .)
    $end            reduce using rule 8 (expression -> term .)
    SEPERATOR       reduce using rule 8 (expression -> term .)
    RPAREN          reduce using rule 8 (expression -> term .)


state 6

    (10) descriptor -> NUMBER .
    (11) factor -> NUMBER .

    POINTER         reduce using rule 10 (descriptor -> NUMBER .)
    PPOINTER        reduce using rule 10 (descriptor -> NUMBER .)
    RETRY           reduce using rule 11 (factor -> NUMBER .)


state 7

    (12) task -> TASKNAME .

    RETRY           reduce using rule 12 (task -> TASKNAME .)
    LPAREN          reduce using rule 12 (task -> TASKNAME .)
    POINTER         reduce using rule 12 (task -> TASKNAME .)
    PPOINTER        reduce using rule 12 (task -> TASKNAME .)
    PARALLEL        reduce using rule 12 (task -> TASKNAME .)
    $end            reduce using rule 12 (task -> TASKNAME .)
    SEPERATOR       reduce using rule 12 (task -> TASKNAME .)
    RPAREN          reduce using rule 12 (task -> TASKNAME .)


state 8

    (1) expression -> expression POINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    expression                     shift and go to state 16
    descriptor                     shift and go to state 2
    factor                         shift and go to state 3
    task                           shift and go to state 4
    term                           shift and go to state 5

state 9

    (2) expression -> expression PPOINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    expression                     shift and go to state 17
    descriptor                     shift and go to state 2
    factor                         shift and go to state 3
    task                           shift and go to state 4
    term                           shift and go to state 5

state 10

    (3) expression -> expression PARALLEL . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    expression                     shift and go to state 18
    descriptor                     shift and go to state 2
    factor                         shift and go to state 3
    task                           shift and go to state 4
    term                           shift and go to state 5

state 11

    (4) expression -> descriptor POINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    descriptor                     shift and go to state 2
    expression                     shift and go to state 19
    factor                         shift and go to state 3
    task                           shift and go to state 4
    term                           shift and go to state 5

state 12

    (5) expression -> descriptor PPOINTER . expression
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    descriptor                     shift and go to state 2
    expression                     shift and go to state 20
    factor                         shift and go to state 3
    task                           shift and go to state 4
    term                           shift and go to state 5

state 13

    (6) expression -> factor RETRY . task
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN

    TASKNAME        shift and go to state 7

    task                           shift and go to state 21

state 14

    (7) expression -> task RETRY . factor
    (11) factor -> . NUMBER

    NUMBER          shift and go to state 23

    factor                         shift and go to state 22

state 15

    (13) task -> task LPAREN . expression SEPERATOR expression RPAREN
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    task                           shift and go to state 4
    expression                     shift and go to state 24
    descriptor                     shift and go to state 2
    factor                         shift and go to state 3
    term                           shift and go to state 5

state 16

    (1) expression -> expression POINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 1 (expression -> expression POINTER expression .)
    PPOINTER        reduce using rule 1 (expression -> expression POINTER expression .)
    PARALLEL        reduce using rule 1 (expression -> expression POINTER expression .)
    $end            reduce using rule 1 (expression -> expression POINTER expression .)
    SEPERATOR       reduce using rule 1 (expression -> expression POINTER expression .)
    RPAREN          reduce using rule 1 (expression -> expression POINTER expression .)

  ! POINTER         [ shift and go to state 8 ]
  ! PPOINTER        [ shift and go to state 9 ]
  ! PARALLEL        [ shift and go to state 10 ]


state 17

    (2) expression -> expression PPOINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 2 (expression -> expression PPOINTER expression .)
    PPOINTER        reduce using rule 2 (expression -> expression PPOINTER expression .)
    PARALLEL        reduce using rule 2 (expression -> expression PPOINTER expression .)
    $end            reduce using rule 2 (expression -> expression PPOINTER expression .)
    SEPERATOR       reduce using rule 2 (expression -> expression PPOINTER expression .)
    RPAREN          reduce using rule 2 (expression -> expression PPOINTER expression .)

  ! POINTER         [ shift and go to state 8 ]
  ! PPOINTER        [ shift and go to state 9 ]
  ! PARALLEL        [ shift and go to state 10 ]


state 18

    (3) expression -> expression PARALLEL expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 3 (expression -> expression PARALLEL expression .)
    PPOINTER        reduce using rule 3 (expression -> expression PARALLEL expression .)
    PARALLEL        reduce using rule 3 (expression -> expression PARALLEL expression .)
    $end            reduce using rule 3 (expression -> expression PARALLEL expression .)
    SEPERATOR       reduce using rule 3 (expression -> expression PARALLEL expression .)
    RPAREN          reduce using rule 3 (expression -> expression PARALLEL expression .)

  ! POINTER         [ shift and go to state 8 ]
  ! PPOINTER        [ shift and go to state 9 ]
  ! PARALLEL        [ shift and go to state 10 ]


state 19

    (4) expression -> descriptor POINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 4 (expression -> descriptor POINTER expression .)
    PPOINTER        reduce using rule 4 (expression -> descriptor POINTER expression .)
    PARALLEL        reduce using rule 4 (expression -> descriptor POINTER expression .)
    $end            reduce using rule 4 (expression -> descriptor POINTER expression .)
    SEPERATOR       reduce using rule 4 (expression -> descriptor POINTER expression .)
    RPAREN          reduce using rule 4 (expression -> descriptor POINTER expression .)

  ! POINTER         [ shift and go to state 8 ]
  ! PPOINTER        [ shift and go to state 9 ]
  ! PARALLEL        [ shift and go to state 10 ]


state 20

    (5) expression -> descriptor PPOINTER expression .
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    POINTER         reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    PPOINTER        reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    PARALLEL        reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    $end            reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    SEPERATOR       reduce using rule 5 (expression -> descriptor PPOINTER expression .)
    RPAREN          reduce using rule 5 (expression -> descriptor PPOINTER expression .)

  ! POINTER         [ shift and go to state 8 ]
  ! PPOINTER        [ shift and go to state 9 ]
  ! PARALLEL        [ shift and go to state 10 ]


state 21

    (6) expression -> factor RETRY task .
    (13) task -> task . LPAREN expression SEPERATOR expression RPAREN

    POINTER         reduce using rule 6 (expression -> factor RETRY task .)
    PPOINTER        reduce using rule 6 (expression -> factor RETRY task .)
    PARALLEL        reduce using rule 6 (expression -> factor RETRY task .)
    $end            reduce using rule 6 (expression -> factor RETRY task .)
    SEPERATOR       reduce using rule 6 (expression -> factor RETRY task .)
    RPAREN          reduce using rule 6 (expression -> factor RETRY task .)
    LPAREN          shift and go to state 15


state 22

    (7) expression -> task RETRY factor .

    POINTER         reduce using rule 7 (expression -> task RETRY factor .)
    PPOINTER        reduce using rule 7 (expression -> task RETRY factor .)
    PARALLEL        reduce using rule 7 (expression -> task RETRY factor .)
    $end            reduce using rule 7 (expression -> task RETRY factor .)
    SEPERATOR       reduce using rule 7 (expression -> task RETRY factor .)
    RPAREN          reduce using rule 7 (expression -> task RETRY factor .)


state 23

    (11) factor -> NUMBER .

    POINTER         reduce using rule 11 (factor -> NUMBER .)
    PPOINTER        reduce using rule 11 (factor -> NUMBER .)
    PARALLEL        reduce using rule 11 (factor -> NUMBER .)
    $end            reduce using rule 11 (factor -> NUMBER .)
    SEPERATOR       reduce using rule 11 (factor -> NUMBER .)
    RPAREN          reduce using rule 11 (factor -> NUMBER .)


state 24

    (13) task -> task LPAREN expression . SEPERATOR expression RPAREN
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    SEPERATOR       shift and go to state 25
    POINTER         shift and go to state 8
    PPOINTER        shift and go to state 9
    PARALLEL        shift and go to state 10


state 25

    (13) task -> task LPAREN expression SEPERATOR . expression RPAREN
    (1) expression -> . expression POINTER expression
    (2) expression -> . expression PPOINTER expression
    (3) expression -> . expression PARALLEL expression
    (4) expression -> . descriptor POINTER expression
    (5) expression -> . descriptor PPOINTER expression
    (6) expression -> . factor RETRY task
    (7) expression -> . task RETRY factor
    (8) expression -> . term
    (10) descriptor -> . NUMBER
    (11) factor -> . NUMBER
    (12) task -> . TASKNAME
    (13) task -> . task LPAREN expression SEPERATOR expression RPAREN
    (9) term -> . task

    NUMBER          shift and go to state 6
    TASKNAME        shift and go to state 7

    task                           shift and go to state 4
    expression                     shift and go to state 26
    descriptor                     shift and go to state 2
    factor                         shift and go to state 3
    term                           shift and go to state 5

state 26

    (13) task -> task LPAREN expression SEPERATOR expression . RPAREN
    (1) expression -> expression . POINTER expression
    (2) expression -> expression . PPOINTER expression
    (3) expression -> expression . PARALLEL expression

    RPAREN          shift and go to state 27
    POINTER         shift and go to state 8
    PPOINTER        shift and go to state 9
    PARALLEL        shift and go to state 10


state 27

    (13) task -> task LPAREN expression SEPERATOR expression RPAREN .

    RETRY           reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    LPAREN          reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    POINTER         reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    PPOINTER        reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    PARALLEL        reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    $end            reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    SEPERATOR       reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)
    RPAREN          reduce using rule 13 (task -> task LPAREN expression SEPERATOR expression RPAREN .)

