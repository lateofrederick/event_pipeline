{
  "scopeName": "source.pointy",
  "name": "Pointy",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#config"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#conditions"
    },
    {
      "include": "#events"
    },
    {
      "include": "#numbers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.pointy",
          "match": "#.*$"
        },
        {
          "name": "comment.line.double-slash.pointy",
          "match": "//.*$"
        }
      ]
    },
    "config": {
      "patterns": [
        {
          "name": "meta.configuration.pointy",
          "begin": "^(\\s*)([a-zA-Z_][a-zA-Z0-9_-]*)(\\s*)([:=])(\\s*)",
          "beginCaptures": {
            "2": {
              "name": "keyword.other.config.key.pointy"
            },
            "4": {
              "name": "punctuation.separator.key-value.pointy"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "match": ".*",
              "name": "string.unquoted.config.value.pointy"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.pointy",
          "match": "(\\|->|->)"
        },
        {
          "name": "keyword.operator.parallel.pointy",
          "match": "\\|\\|"
        },
        {
          "name": "keyword.operator.retry.pointy",
          "match": "\\*\\s*\\d+"
        },
        {
          "name": "keyword.operator.fallback.pointy",
          "match": "\\|X\\||\\|x\\|"
        },
        {
          "name": "punctuation.separator.pointy",
          "match": "[,()]"
        },
        {
          "name": "keyword.operator.pipeassign.pointy",
          "match": "\\|>"
        }
      ]
    },
    "conditions": {
      "patterns": [
        {
          "name": "constant.numeric.condition.pointy",
          "match": "\\b(0|1)\\b(?=\\s*->)"
        },
        {
          "name": "meta.condition.mapping.pointy",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#operators"
            },
            {
              "include": "#events"
            },
            {
              "include": "#numbers"
            }
          ]
        }
      ]
    },
    "events": {
      "patterns": [
        {
          "name": "entity.name.function.event.pointy",
          "match": "\\b([A-Z][A-Za-z0-9_]*|[a-z][A-Za-z0-9_]*)(?=\\s*(?:->|\\(|$|,))"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.pointy",
          "match": "\\b\\d+\\b"
        }
      ]
    }
  },
  "scope": "source.pointy"
}